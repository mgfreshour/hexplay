'use strict';

import createjs = require(createjs);

/**
 * Class that handles drawing stuff on the screen.
 * @constructor
 * @implements {IRenderer}
 * @param {jQuery} screen the main container to render to
 */
class CreatejsRenderer {
    constructor (screen) {
        var stage = new createjs.Stage(screen.attr('id'));
        /**
         * Main Stage
         * @type {createjs.Stage}
         */
        this.stage = stage;
        this.layers = {};
        this.spriteSheets = {};

        createjs.Ticker.addEventListener("tick", stage);
    };
}

/**
 * @inheritDoc
 */
CreatejsRenderer.prototype.drawItemToLayer = function (layer_name, x, y, item) {
    var layer = this._getLayer(layer_name);
    this._drawItem(item, layer, x, y);
};

/**
 * @inheritDoc
 */
CreatejsRenderer.prototype.moveItem = function (x, y, item) {
    if (item.gfxContainer) {
        createjs.Tween.get(item.gfxContainer).to({ x: x, y: y }, 300, createjs.Ease.getBackInOut(1));
    } else {
        throw "Can't move item not yet drawn!";
    }
};

/**
 * @inheritDoc
 */
CreatejsRenderer.prototype.hideItem = function (item) {
    if (item.gfxContainer) {
        item.gfxContainer.visible = false;
    }
};

/**
 * @inheritDoc
 */
CreatejsRenderer.prototype.showItem = function (item) {
    if (item.gfxContainer) {
        item.gfxContainer.visible = true;
    }
};

/**
 * @inheritDoc
 */
CreatejsRenderer.prototype.removeItem = function (item) {
    if (item.gfxContainer) {
        item.gfxContainer.parent.removeChild(item.gfxContainer);
    }
};

/**
 * @inheritDoc
 */
CreatejsRenderer.prototype.addLayer = function (layer_name) {
    var container = new createjs.Container();
    this.layers[layer_name] = container;
    this.stage.addChild(container);
};

/**
 * @inheritDoc
 */
CreatejsRenderer.prototype.clearLayer = function (layer_name) {
    if (this.layers[layer_name] !== undefined) {
        this.layers[layer_name].removeAllChildren();
    }
};

/**
 * @inheritDoc
 */
CreatejsRenderer.prototype.clearScreen = function (layer_name) {
    $.each(this.layers, function (key) {
        this.clearLayer(key);
    }.bind(this));
};

/**
 * @inheritDoc
 */
CreatejsRenderer.prototype.fadeOutAndRemove = function (item, duration, delay) {
    delay = delay !== undefined ? delay : 0;
    duration = duration !== undefined ? duration : 500;
    if (item.gfxContainer) {
        createjs.Tween.get(item.gfxContainer)
            .wait(delay)
            .to({ alpha: 0 }, duration)
            .call(_.bind(function () { this.removeItem(item); }, this));
    }
};

/**
 * Gets or creates a layer of name
 * @private
 * @param {String} layer_name
 * @return {jQuery}
 */
CreatejsRenderer.prototype._getLayer = function (layer_name) {
    if (this.layers[layer_name] === undefined) {
        this.addLayer(layer_name);
    }

    return this.layers[layer_name];
};

/**
 * Draw a RenderableItem to the screen
 * @private
 * @param {Renderable} item
 * @param {createjs.Container} container the jquery item to draw into
 * @param {Number} screen_x
 * @param {Number} screen_y
 * @param {Boolean} [force_redraw]
 */
CreatejsRenderer.prototype._drawItem = function (item, container, screen_x, screen_y, force_redraw) {
    if (item.gfxContainer && !force_redraw) {
        // Just move it
        item.gfxContainer.x = screen_x;
        item.gfxContainer.y = screen_y;
    } else {
        // --- Style values to position hex image in the right location
        var n = 0,
            img = item.get('img'),
            text = item.get('text');

        // Only add the element if there are actual drawables
        if (img || text) {

            item.gfxContainer = new createjs.Container();

            // Draw the images
            if (img) {
                if ($.isArray(img)) {
                    for (n = 0; n < img.length; n++) {
                        img[n].gfxContainer = this._createImageSprite(img[n].src, item.gfxContainer,
                            img[n].x, img[n].y, img[n].height, img[n].width,
                            img[n].offset || {});

                    }
                } else {
                    img.gfxContainer = this._createImageSprite(img.src, item.gfxContainer, img.x, img.y,
                        img.height, img.width, img.offset || {});
                }
            }

            // Draw the text
            if (text) {
                if ($.isArray(text)) {
                    for (n = 0; n < text.length; n++) {
                        text[n].gfxContainer = this._createTextSprite(text[n].text, text[n].color, text[n].offset,
                            item.gfxContainer, text[n].font);
                    }
                } else {
                    text.gfxContainer = this._createTextSprite(text.text, text.color, text.offset,
                        item.gfxContainer, text.font);
                }
            }

            // Flip the buffer... sort of :P
            item.gfxContainer.x = screen_x;
            item.gfxContainer.y = screen_y;
            container.addChild(item.gfxContainer);
        }
    }
};

/**
 * Draws an image to the screen as a BG image on a div
 * @private
 * @param {String} img_src
 * @param {createjs.Container} parentContainer where to add elements
 * @param {Number} img_x the position in the background image to start drawing from
 * @param {Number} img_y the position in the background image to start drawing from
 * @param {Number} height
 * @param {Number} width
 * @param {{x,y}} offset
 * @return {createjs.Sprite} sprite created
 */
CreatejsRenderer.prototype._createImageSprite = function (img_src, parentContainer, img_x, img_y,
                                                          height, width, offset) {
    // Create the graphic container
    var spriteSheet = this._getSpriteSheet(img_src, img_x, img_y, height, width);
    var sprite = new createjs.Sprite(spriteSheet, 'idle');
    sprite.x = offset.x || 0;
    sprite.y = offset.y || 0;
    parentContainer.addChild(sprite);
    return sprite;
};

/**
 * Creates or retrieves a sprite sheet
 * @private
 * @param {String} img_src
 * @param {Number} img_x the position in the background image to start drawing from
 * @param {Number} img_y the position in the background image to start drawing from
 * @param {Number} height
 * @param {Number} width
 */
CreatejsRenderer.prototype._getSpriteSheet = function (img_src, img_x, img_y, height, width) {
    var key = img_src + ',' + img_x + ',' + img_y + ',' + height + ',' + width;
    if (!this.spriteSheets[key]) {
        var data = {
            images: [ img_src ],
            frames: [
                // x, y, width, height, imageIndex, regX, regY
                [ img_x, img_y, height, width, 0 ]
            ],
            animations: { idle: [0, 0] }
        };
        this.spriteSheets[key] = new createjs.SpriteSheet(data);
    }
    return this.spriteSheets[key];
};


/**
 * Draws an image to the screen as a BG image on a div
 * @private
 * @param {String} text
 * @param {String} color
 * @param {x,y} offset
 * @param {createjs.Container} parentContainer where to add elements
 * @param {String} font
 * @return {createjs.Text} gfx sprite created
 */
CreatejsRenderer.prototype._createTextSprite = function (text, color, offset, parentContainer, font) {
    var textSprite = new createjs.Text(text, font || "20px Arial", color || '#FFFFFF');
    textSprite.x = offset.x || 0;
    textSprite.y = offset.y || 0;
    parentContainer.addChild(textSprite);
    return textSprite;
};


